package Riap::Simple; # just to make PodWeaver happy

# VERSION

1;
# ABSTRACT: Simple Riap protocol over any stream socket

=head1 PROTOCOL VERSION

 1.1


=head1 SYNOPSIS

This document specifies a simple L<Riap> protocol over any stream socket like
TCP, Unix, or piping to program.


=head1 DESCRIPTION

Riap::Simple is a simpler alternative to L<Riap::HTTP>. It supports less
features (currently only supports sending/receiving Riap request and response in
JSON encoding, no encryption, no authentication, no sending of logging
messages). It is suitable for localhost/localnet communication (e.g. between
processes of different languages). For public-facing service, Riap::HTTP is more
recommended.

=head2 Request

B<Client> first sends a request line of the following format:

 "J" <size> <CRLF>

That is, the uppercase letter C<J> (for JSON) and size of subsequent request
body in bytes. Client then sends the Riap request in JSON, followed by CRLF.

Alternatively, client can also send the whole request in a single line, for
shorter requests:

 "j" <JSON> <CRLF>

That is, the lowercase letter C<j> followed by JSON data, followed by CRLF. In
this format, the JSON data cannot contain newlines.

=head2 Response

B<Server> replies by first sending a similar line:

 "J" <size> <CRLF>

followed by enveloped result encoded in JSON and a single <CRLF>. The next
request can then be sent by client.

If client/server sends an invalid request/response line, the connection can be
closed.


=head1 EXAMPLES

Below are some examples of what is sent and received on the wire.

 J9
 {"v":0.9}
 J40
 [502,"Protocol version not implemented"]

 J1
 {
 J20
 [400,"Invalid JSON"]

 J57
 {"action":"call","uri":"/Math/mult","args":{"a":2,"b":3}}
 J12
 [200,"OK",6]

 j{"action":"call","uri":"/Math/mult","args":{"a":2,"b":4}}
 J12
 [200,"OK",8]

 J44
 {"v":1.1,"action":"info","uri":"/Math/mult"}
 J57
 [200,"OK",{"v":1.1,"type":"function","uri":"/Math/mult"}]


=head1 FAQ


=head1 SEE ALSO

L<Riap>, L<Riap::HTTP>

=cut
